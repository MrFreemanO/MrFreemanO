import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { TrendingUp, TrendingDown, Minus, RefreshCw, Play } from 'lucide-react'
import { format } from 'date-fns'

export function Signals() {
  const [signals, setSignals] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchSignals()
    
    // Set up periodic refresh
    const interval = setInterval(fetchSignals, 60000) // Every minute
    
    return () => clearInterval(interval)
  }, [])

  const fetchSignals = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/trading/signals')
      const data = await response.json()
      if (data.success) {
        setSignals(data.data)
      }
    } catch (error) {
      console.error('Failed to fetch signals:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleExecuteSignal = async (signal) => {
    // In a real implementation, this would execute the trade
    console.log('Executing signal:', signal)
  }

  const getSignalIcon = (signalType) => {
    switch (signalType) {
      case 'BUY':
        return <TrendingUp className="h-4 w-4" />
      case 'SELL':
        return <TrendingDown className="h-4 w-4" />
      case 'HOLD':
        return <Minus className="h-4 w-4" />
      default:
        return <Minus className="h-4 w-4" />
    }
  }

  const getSignalBadgeVariant = (signalType) => {
    switch (signalType) {
      case 'BUY': return 'default'
      case 'SELL': return 'destructive'
      case 'HOLD': return 'secondary'
      default: return 'outline'
    }
  }

  const getConfidenceColor = (confidence) => {
    if (confidence >= 0.8) return 'text-green-600'
    if (confidence >= 0.6) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getViabilityColor = (score) => {
    if (score >= 80) return 'text-green-600'
    if (score >= 60) return 'text-yellow-600'
    return 'text-red-600'
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <RefreshCw className="h-8 w-8 animate-spin text-muted-foreground" />
      </div>
    )
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Trading Signals</h1>
          <p className="text-muted-foreground">
            Real-time trading signals generated by the AI system
          </p>
        </div>
        
        <Button onClick={fetchSignals} variant="outline">
          <RefreshCw className="h-4 w-4 mr-2" />
          Refresh
        </Button>
      </div>

      {/* Signals List */}
      <div className="space-y-4">
        {signals.length === 0 ? (
          <Card>
            <CardContent className="text-center py-12">
              <div className="text-muted-foreground">
                No trading signals available at the moment
              </div>
            </CardContent>
          </Card>
        ) : (
          signals.map((signal, index) => (
            <Card key={index}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className={`p-2 rounded-full ${
                      signal.signal_type === 'BUY' ? 'bg-green-100 text-green-600' :
                      signal.signal_type === 'SELL' ? 'bg-red-100 text-red-600' :
                      'bg-gray-100 text-gray-600'
                    }`}>
                      {getSignalIcon(signal.signal_type)}
                    </div>
                    
                    <div>
                      <CardTitle className="text-lg">
                        {signal.token_symbol}
                      </CardTitle>
                      <CardDescription>
                        {signal.token_address}
                      </CardDescription>
                    </div>
                    
                    <Badge variant={getSignalBadgeVariant(signal.signal_type)}>
                      {signal.signal_type}
                    </Badge>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <div className="text-right">
                      <div className="text-sm text-muted-foreground">
                        {format(new Date(signal.timestamp), 'MMM dd, HH:mm')}
                      </div>
                    </div>
                    
                    {signal.signal_type === 'BUY' && (
                      <Button
                        onClick={() => handleExecuteSignal(signal)}
                        size="sm"
                        className="flex items-center space-x-1"
                      >
                        <Play className="h-3 w-3" />
                        <span>Execute</span>
                      </Button>
                    )}
                  </div>
                </div>
              </CardHeader>
              
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-4">
                  <div>
                    <div className="text-sm text-muted-foreground">Current Price</div>
                    <div className="font-medium">${signal.current_price.toFixed(6)}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm text-muted-foreground">Target Price</div>
                    <div className="font-medium">${signal.target_price.toFixed(6)}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm text-muted-foreground">Stop Loss</div>
                    <div className="font-medium">${signal.stop_loss.toFixed(6)}</div>
                  </div>
                  
                  <div>
                    <div className="text-sm text-muted-foreground">Confidence</div>
                    <div className={`font-medium ${getConfidenceColor(signal.confidence)}`}>
                      {(signal.confidence * 100).toFixed(1)}%
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-sm text-muted-foreground">Viability Score</div>
                    <div className={`font-medium ${getViabilityColor(signal.viability_score)}`}>
                      {signal.viability_score.toFixed(1)}
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-sm text-muted-foreground">Potential Return</div>
                    <div className="font-medium">
                      {signal.signal_type === 'BUY' ? (
                        <>+{(((signal.target_price - signal.current_price) / signal.current_price) * 100).toFixed(1)}%</>
                      ) : signal.signal_type === 'SELL' ? (
                        <>{(((signal.target_price - signal.current_price) / signal.current_price) * 100).toFixed(1)}%</>
                      ) : (
                        'N/A'
                      )}
                    </div>
                  </div>
                </div>
                
                <div className="p-3 bg-muted rounded-lg">
                  <div className="text-sm font-medium text-foreground mb-1">
                    Analysis
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {signal.reasoning}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  )
}

